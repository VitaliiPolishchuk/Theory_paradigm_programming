import Data.Map
import Data.Maybe
import Data.Either
import Data.Set
import Control.Arrow

---------------------------------
-- Datatypes and utilities
---------------------------------

data Terminal = T String | Dollar | Epsilon deriving (Show, Eq, Ord)
data Nonterminal = NT String | Start String deriving (Show, Eq, Ord)

type Symbol = (Either Nonterminal Terminal)

data Production = Prod {left_hand :: Nonterminal, right_hand :: [Symbol]} deriving (Show, Eq)
data Grammar = Grammar [Production] deriving (Show)

allTerminalsInGrammar :: Grammar -> Set Terminal
allTerminalsInGrammar (Grammar []) = Data.Set.empty
allTerminalsInGrammar (Grammar (prod:prods)) =
  (
    Data.Set.union
    (allTerminalsInGrammar (Grammar prods))
    (Data.Set.fromList $ onlyTerminals (right_hand prod))
    )
  where onlyTerminals a = rights a

allNonterminalsInGrammar :: Grammar -> Set Nonterminal
allNonterminalsInGrammar (Grammar []) = Data.Set.empty
allNonterminalsInGrammar (Grammar (prod:prods)) =
  (
    Data.Set.union
    (allNonterminalsInGrammar (Grammar prods))
    (Data.Set.singleton (left_hand prod))
    )

type FirstSet = (Set Terminal)
data FirstMap = FirstMap (Data.Map.Map Nonterminal (Set Terminal)) deriving (Show, Eq)


getFirstSetFor :: Nonterminal -> FirstMap -> FirstSet
getFirstSetFor nonterminal (FirstMap firstmap) =
  f $ Data.Map.lookup nonterminal firstmap
  where
    f Nothing = Data.Set.empty
    f (Just set) = set

mergeSetIntoFirstMap :: FirstMap -> Nonterminal -> Set Terminal -> FirstMap
mergeSetIntoFirstMap (FirstMap map) nt t = FirstMap (insertWith (Data.Set.union) nt t map)

---------------------------------------------------------

fixpoint :: Eq a => (a -> a) -> a -> a
fixpoint f x = let x' = f x in 
            if x == x' then x 
            else fixpoint f x'


firstt :: Grammar -> FirstMap
firstt grammar = (fixpoint  (firsti grammar) (first0 grammar))
  where
    --------------------------------------------------------
    first0 :: Grammar -> FirstMap
    first0 grammar = FirstMap $
      (Data.Map.fromList $ (fmap defaults) $ Data.Set.toList (allNonterminalsInGrammar grammar))
      where
        defaults nt = (nt, (Data.Set.empty))
    --------------------------------------------------------
    firsti :: Grammar -> FirstMap -> FirstMap
    firsti (Grammar []) fMinus1 = fMinus1
    firsti (Grammar (prod:prods)) fMinus1 =
      (
        mergeSetIntoFirstMap                  
        (firsti (Grammar prods) fMinus1)      
        (left_hand prod)                      
        (terminalsForRHS prod)                
      )
      where   
        --
        terminalsForRHS :: Production -> Set Terminal
        terminalsForRHS (Prod _ []) = (Data.Set.singleton Epsilon)        
        terminalsForRHS (Prod _ [(Right Epsilon)]) = (Data.Set.singleton Epsilon)
        terminalsForRHS (Prod x (yj:ys)) =
          case yj of    
            Right terminal    -> Data.Set.singleton terminal
            Left  nonterminal -> if   (Data.Set.member Epsilon first_iminus1)
                                 then (Data.Set.union
                                       (terminalsForYj)
                                       (terminalsForRHS (Prod x ys)))
                                 else  (terminalsForYj)  
              where
                first_iminus1 = getFirstSetFor nonterminal fMinus1

                terminalsForYj = (Data.Set.delete Epsilon first_iminus1)
       


main = let
  dragon_gram = Grammar [p1, p2, p3, p4] where
    p1 = Prod {left_hand = (Start "S"),   right_hand = [Left  (NT "A"),   Left (NT "B")]}
    p2 = Prod {left_hand = (Start "S"),  right_hand = [Left (NT "B"),    Right (T "a")]}
    p3 = Prod {left_hand = (NT "A"),  right_hand = [Left (Start "S")]}
    p4 = Prod {left_hand = (NT "B"),   right_hand = [Right (T "b")]}
  in do
  putStrLn "EXAMPLE GRAMMAR: "
  print (dragon_gram)
  putStrLn "FIRST(G) = "
  let first_map = firstt dragon_gram
  let nonTerm = NT "A"
  print(getFirstSetFor nonTerm first_map)